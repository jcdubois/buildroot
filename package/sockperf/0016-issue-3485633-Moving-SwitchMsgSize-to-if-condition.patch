From 26142cfcc3c4f7803f1e9034bc5d188e5a8db6a5 Mon Sep 17 00:00:00 2001
From: Alexander Grissik <agrissik@nvidia.com>
Date: Wed, 31 May 2023 17:16:31 +0300
Subject: [PATCH 16/33] issue: 3485633 Moving SwitchMsgSize to if condition

Signed-off-by: Alexander Grissik <agrissik@nvidia.com>
---
 src/client.cpp | 81 +++++++++++++++-----------------------------------
 src/client.h   | 19 +++++++-----
 2 files changed, 35 insertions(+), 65 deletions(-)

diff --git a/src/client.cpp b/src/client.cpp
index 06b9666..2f2b726 100644
--- a/src/client.cpp
+++ b/src/client.cpp
@@ -698,25 +698,19 @@ ClientBase::~ClientBase() {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-       PongModeCare>::Client(int _fd_min, int _fd_max, int _fd_num)
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+Client<IoType, SwitchCycleDuration, PongModeCare>::Client(int _fd_min, int _fd_max, int _fd_num)
     : ClientBase(), m_ioHandler(_fd_min, _fd_max, _fd_num), m_pongModeCare(m_pMsgRequest) {
     os_thread_init(&m_receiverTid);
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-       PongModeCare>::~Client() {}
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+Client<IoType, SwitchCycleDuration, PongModeCare>::~Client() {}
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::client_receiver_thread() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::client_receiver_thread() {
     while (!g_b_exit) {
         client_receive();
     }
@@ -730,10 +724,8 @@ void *client_receiver_thread(void *arg) {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::cleanupAfterLoop() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::cleanupAfterLoop() {
     usleep(100 * 1000); // 0.1 sec - wait for rx packets for last sends (in normal flow)
     if (m_receiverTid.tid) {
         os_thread_kill(&m_receiverTid);
@@ -879,10 +871,8 @@ static int _connect_check(int ifd, int timeout_ms) {
 #undef POLL_TIMEOUT_MS
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-int Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-           PongModeCare>::initBeforeLoop() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+int Client<IoType, SwitchCycleDuration, PongModeCare>::initBeforeLoop() {
     int rc = SOCKPERF_ERR_NONE;
     if (g_b_exit) return rc;
 
@@ -1048,10 +1038,8 @@ int Client<IoType, SwitchCycleDuration, SwitchMsgSize,
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::doSendThenReceiveLoop() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::doSendThenReceiveLoop() {
     if (g_pApp->m_const_params.measurement == TIME_BASED) {
         // cycle through all set fds in the array (with wrap around to beginning)
         for (int curr_fds = m_ioHandler.m_fd_min; !g_b_exit; curr_fds = g_fds_array[curr_fds]->next_fd)
@@ -1115,10 +1103,8 @@ void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::doSendLoop() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::doSendLoop() {
     // cycle through all set fds in the array (with wrap around to beginning)
     for (int curr_fds = m_ioHandler.m_fd_min; !g_b_exit; curr_fds = g_fds_array[curr_fds]->next_fd)
         client_send_burst(curr_fds);
@@ -1138,10 +1124,8 @@ static inline void playbackCycleDurationWait(const TicksDuration &i_cycleDuratio
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::doPlayback() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::doPlayback() {
     static const bool is_exec_activity_info =
         (g_pApp->m_const_params.packetrate_stats_print_ratio > 0);
 
@@ -1176,10 +1160,8 @@ void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-            PongModeCare>::doHandler() {
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
+void Client<IoType, SwitchCycleDuration, PongModeCare>::doHandler() {
     int rc = SOCKPERF_ERR_NONE;
 
     rc = initBeforeLoop();
@@ -1197,39 +1179,24 @@ void Client<IoType, SwitchCycleDuration, SwitchMsgSize,
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
-    Client<IoType, SwitchCycleDuration, SwitchMsgSize,
-           PongModeCare> c(_fd_min, _fd_max, _fd_num);
+    Client<IoType, SwitchCycleDuration, PongModeCare> c(_fd_min, _fd_max, _fd_num);
     c.doHandler();
 }
 
 //------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize>
+template <class IoType, class SwitchCycleDuration>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.b_stream)
         client_handler<IoType, SwitchCycleDuration,
-                       SwitchMsgSize, PongModeNever>(_fd_min, _fd_max, _fd_num);
+                       PongModeNever>(_fd_min, _fd_max, _fd_num);
     else if (g_pApp->m_const_params.reply_every == 1)
         client_handler<IoType, SwitchCycleDuration,
-                       SwitchMsgSize, PongModeAlways>(_fd_min, _fd_max, _fd_num);
+                       PongModeAlways>(_fd_min, _fd_max, _fd_num);
     else
         client_handler<IoType, SwitchCycleDuration,
-                       SwitchMsgSize, PongModeNormal>(_fd_min, _fd_max, _fd_num);
-}
-
-//------------------------------------------------------------------------------
-template <class IoType,
-          class SwitchCycleDuration>
-void client_handler(int _fd_min, int _fd_max, int _fd_num) {
-    if (g_pApp->m_const_params.msg_size_range > 0)
-        client_handler<IoType, SwitchCycleDuration,
-                       SwitchOnMsgSize>(_fd_min, _fd_max, _fd_num);
-    else
-        client_handler<IoType, SwitchCycleDuration,
-                       SwitchOff>(_fd_min, _fd_max, _fd_num);
+                       PongModeNormal>(_fd_min, _fd_max, _fd_num);
 }
 
 //------------------------------------------------------------------------------
diff --git a/src/client.h b/src/client.h
index 507c5a6..880939f 100644
--- a/src/client.h
+++ b/src/client.h
@@ -50,8 +50,7 @@ protected:
 
 //==============================================================================
 //==============================================================================
-template <class IoType,
-          class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
+template <class IoType, class SwitchCycleDuration, class PongModeCare>
 class Client : public ClientBase {
 private:
     os_thread_t m_receiverTid;
@@ -61,21 +60,20 @@ private:
     SwitchOnDataIntegrity m_switchDataIntegrity;
     SwitchOnActivityInfo m_switchActivityInfo;
     SwitchCycleDuration m_switchCycleDuration; // SwitchOnDummySend | SwitchOnCycleDuration | SwitchOff
-    SwitchMsgSize m_switchMsgSize; // SwitchOnMsgSize | SwitchOff
+    SwitchOnMsgSize m_switchMsgSize;
     PongModeCare m_pongModeCare; // has msg_sendto() method and can be one of: PongModeNormal,
                                  // PongModeAlways, PongModeNever
 
     class ClientMessageHandlerCallback {
-        Client<IoType,
-              SwitchCycleDuration, SwitchMsgSize, PongModeCare> &m_client;
+        Client<IoType, SwitchCycleDuration, PongModeCare> &m_client;
         int m_ifd;
         struct sockaddr_store_t &m_recvfrom_addr;
         socklen_t m_recvfrom_addrlen;
         int m_receiveCount;
 
     public:
-        inline ClientMessageHandlerCallback(Client<IoType,
-                SwitchCycleDuration, SwitchMsgSize, PongModeCare> &client,
+        inline ClientMessageHandlerCallback(
+                Client<IoType, SwitchCycleDuration, PongModeCare> &client,
                 int ifd, struct sockaddr_store_t &recvfrom_addr,
                 socklen_t recvfrom_addrlen) :
             m_client(client),
@@ -345,8 +343,13 @@ private:
         static const bool is_exec_activity_info =
             (g_pApp->m_const_params.packetrate_stats_print_ratio > 0);
 
+        static const bool is_exec_msg_size =
+            (g_pApp->m_const_params.msg_size_range > 0);
+
         // init
-        m_switchMsgSize.execute(m_pMsgRequest);
+        if (unlikely(is_exec_msg_size)) {
+            m_switchMsgSize.execute(m_pMsgRequest);
+        }
 
         // idle
         m_switchCycleDuration.execute(m_pMsgRequest, ifd);
-- 
2.43.0

