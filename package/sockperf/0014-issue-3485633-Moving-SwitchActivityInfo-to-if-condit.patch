From 21c7532a1a972a4892217c71718b1d7bb4b2164a Mon Sep 17 00:00:00 2001
From: Alexander Grissik <agrissik@nvidia.com>
Date: Wed, 31 May 2023 16:51:14 +0300
Subject: [PATCH 14/33] issue: 3485633 Moving SwitchActivityInfo to if
 condition

Signed-off-by: Alexander Grissik <agrissik@nvidia.com>
---
 src/client.cpp   | 80 ++++++++++++++++++++++--------------------------
 src/client.h     | 16 +++++++---
 src/server.cpp   | 33 ++++++++------------
 src/server.h     | 24 +++++++++------
 src/sockperf.cpp |  8 -----
 5 files changed, 75 insertions(+), 86 deletions(-)

diff --git a/src/client.cpp b/src/client.cpp
index 98651fe..6cbaa1d 100644
--- a/src/client.cpp
+++ b/src/client.cpp
@@ -31,7 +31,6 @@
 #include "client.h"
 #include "iohandlers.h"
 #include "packet.h"
-#include "switches.h"
 
 #include <math.h>
 #include <map>
@@ -699,24 +698,24 @@ ClientBase::~ClientBase() {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
        PongModeCare>::Client(int _fd_min, int _fd_max, int _fd_num)
     : ClientBase(), m_ioHandler(_fd_min, _fd_max, _fd_num), m_pongModeCare(m_pMsgRequest) {
     os_thread_init(&m_receiverTid);
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
        PongModeCare>::~Client() {}
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::client_receiver_thread() {
     while (!g_b_exit) {
         client_receive();
@@ -731,9 +730,9 @@ void *client_receiver_thread(void *arg) {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::cleanupAfterLoop() {
     usleep(100 * 1000); // 0.1 sec - wait for rx packets for last sends (in normal flow)
     if (m_receiverTid.tid) {
@@ -880,9 +879,9 @@ static int _connect_check(int ifd, int timeout_ms) {
 #undef POLL_TIMEOUT_MS
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-int Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+int Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
            PongModeCare>::initBeforeLoop() {
     int rc = SOCKPERF_ERR_NONE;
     if (g_b_exit) return rc;
@@ -1049,9 +1048,9 @@ int Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::doSendThenReceiveLoop() {
     if (g_pApp->m_const_params.measurement == TIME_BASED) {
         // cycle through all set fds in the array (with wrap around to beginning)
@@ -1116,9 +1115,9 @@ void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::doSendLoop() {
     // cycle through all set fds in the array (with wrap around to beginning)
     for (int curr_fds = m_ioHandler.m_fd_min; !g_b_exit; curr_fds = g_fds_array[curr_fds]->next_fd)
@@ -1139,10 +1138,13 @@ static inline void playbackCycleDurationWait(const TicksDuration &i_cycleDuratio
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::doPlayback() {
+    static const bool is_exec_activity_info =
+        (g_pApp->m_const_params.packetrate_stats_print_ratio > 0);
+
     usleep(100 * 1000); // wait for receiver thread to start (since we don't use warmup) //TODO:
                         // configure!
     s_startTime.setNowNonInline(); // reduce code size by calling non inline func from slow path
@@ -1163,7 +1165,9 @@ void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration
         // send
         client_send_packet(ifd);
 
-        m_switchActivityInfo.execute(m_pMsgRequest->getSequenceCounter());
+        if (unlikely(is_exec_activity_info)) {
+            m_switchActivityInfo.execute(m_pMsgRequest->getSequenceCounter());
+        }
     }
     g_cycle_wait_loop_counter++; // for silenting waring at the end
     s_endTime.setNowNonInline(); // reduce code size by calling non inline func from slow path
@@ -1172,9 +1176,9 @@ void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
-void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+void Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
             PongModeCare>::doHandler() {
     int rc = SOCKPERF_ERR_NONE;
 
@@ -1193,67 +1197,57 @@ void Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
-    Client<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration, SwitchMsgSize,
+    Client<IoType, SwitchDataIntegrity, SwitchCycleDuration, SwitchMsgSize,
            PongModeCare> c(_fd_min, _fd_max, _fd_num);
     c.doHandler();
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.b_stream)
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
+        client_handler<IoType, SwitchDataIntegrity, SwitchCycleDuration,
                        SwitchMsgSize, PongModeNever>(_fd_min, _fd_max, _fd_num);
     else if (g_pApp->m_const_params.reply_every == 1)
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
+        client_handler<IoType, SwitchDataIntegrity, SwitchCycleDuration,
                        SwitchMsgSize, PongModeAlways>(_fd_min, _fd_max, _fd_num);
     else
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
+        client_handler<IoType, SwitchDataIntegrity, SwitchCycleDuration,
                        SwitchMsgSize, PongModeNormal>(_fd_min, _fd_max, _fd_num);
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.msg_size_range > 0)
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
+        client_handler<IoType, SwitchDataIntegrity, SwitchCycleDuration,
                        SwitchOnMsgSize>(_fd_min, _fd_max, _fd_num);
     else
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchCycleDuration,
+        client_handler<IoType, SwitchDataIntegrity, SwitchCycleDuration,
                        SwitchOff>(_fd_min, _fd_max, _fd_num);
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo>
+template <class IoType, class SwitchDataIntegrity>
 void client_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.cycleDuration > TicksDuration::TICKS0) {
         if (g_pApp->m_const_params.dummy_mps) {
-            client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchOnDummySend>(
+            client_handler<IoType, SwitchDataIntegrity, SwitchOnDummySend>(
                 _fd_min, _fd_max, _fd_num);
         } else {
-            client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchOnCycleDuration>(
+            client_handler<IoType, SwitchDataIntegrity, SwitchOnCycleDuration>(
                 _fd_min, _fd_max, _fd_num);
         }
     } else
-        client_handler<IoType, SwitchDataIntegrity, SwitchActivityInfo, SwitchOff>(_fd_min, _fd_max,
+        client_handler<IoType, SwitchDataIntegrity, SwitchOff>(_fd_min, _fd_max,
                                                                                    _fd_num);
 }
 
-//------------------------------------------------------------------------------
-template <class IoType, class SwitchDataIntegrity>
-void client_handler(int _fd_min, int _fd_max, int _fd_num) {
-    if (g_pApp->m_const_params.packetrate_stats_print_ratio > 0)
-        client_handler<IoType, SwitchDataIntegrity, SwitchOnActivityInfo>(_fd_min, _fd_max,
-                                                                          _fd_num);
-    else
-        client_handler<IoType, SwitchDataIntegrity, SwitchOff>(_fd_min, _fd_max, _fd_num);
-}
-
 //------------------------------------------------------------------------------
 template <class IoType> void client_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.data_integrity)
diff --git a/src/client.h b/src/client.h
index 0f2ef29..7ffaa52 100644
--- a/src/client.h
+++ b/src/client.h
@@ -33,6 +33,7 @@
 #include "common.h"
 #include "input_handlers.h"
 #include "packet.h"
+#include "switches.h"
 
 //==============================================================================
 //==============================================================================
@@ -49,7 +50,7 @@ protected:
 
 //==============================================================================
 //==============================================================================
-template <class IoType, class SwitchDataIntegrity, class SwitchActivityInfo,
+template <class IoType, class SwitchDataIntegrity,
           class SwitchCycleDuration, class SwitchMsgSize, class PongModeCare>
 class Client : public ClientBase {
 private:
@@ -58,14 +59,14 @@ private:
     addr_to_id m_ServerList;
 
     SwitchDataIntegrity m_switchDataIntegrity; // SwitchOnDataIntegrity | SwitchOff
-    SwitchActivityInfo m_switchActivityInfo; // SwitchOnActivityInfo | SwitchOff
+    SwitchOnActivityInfo m_switchActivityInfo;
     SwitchCycleDuration m_switchCycleDuration; // SwitchOnDummySend | SwitchOnCycleDuration | SwitchOff
     SwitchMsgSize m_switchMsgSize; // SwitchOnMsgSize | SwitchOff
     PongModeCare m_pongModeCare; // has msg_sendto() method and can be one of: PongModeNormal,
                                  // PongModeAlways, PongModeNever
 
     class ClientMessageHandlerCallback {
-        Client<IoType, SwitchDataIntegrity, SwitchActivityInfo,
+        Client<IoType, SwitchDataIntegrity,
               SwitchCycleDuration, SwitchMsgSize, PongModeCare> &m_client;
         int m_ifd;
         struct sockaddr_store_t &m_recvfrom_addr;
@@ -73,7 +74,7 @@ private:
         int m_receiveCount;
 
     public:
-        inline ClientMessageHandlerCallback(Client<IoType, SwitchDataIntegrity, SwitchActivityInfo,
+        inline ClientMessageHandlerCallback(Client<IoType, SwitchDataIntegrity,
                 SwitchCycleDuration, SwitchMsgSize, PongModeCare> &client,
                 int ifd, struct sockaddr_store_t &recvfrom_addr,
                 socklen_t recvfrom_addrlen) :
@@ -337,6 +338,9 @@ private:
 
     //------------------------------------------------------------------------------
     inline void client_send_burst(int ifd) {
+        static const bool is_exec_activity_info =
+            (g_pApp->m_const_params.packetrate_stats_print_ratio > 0);
+
         // init
         m_switchMsgSize.execute(m_pMsgRequest);
 
@@ -354,7 +358,9 @@ private:
 #endif // USING_EXTRA_API
         }
 
-        m_switchActivityInfo.execute(m_pMsgRequest->getSequenceCounter());
+        if (unlikely(is_exec_activity_info)) {
+            m_switchActivityInfo.execute(m_pMsgRequest->getSequenceCounter());
+        }
     }
 
     //------------------------------------------------------------------------------
diff --git a/src/server.cpp b/src/server.cpp
index 5a8f536..d0004d9 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -28,7 +28,6 @@
 
 #include "server.h"
 #include "iohandlers.h"
-#include "switches.h"
 #include <memory>
 
 // static members initialization
@@ -162,17 +161,17 @@ void ServerBase::cleanupAfterLoop() {
 //==============================================================================
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
-Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::Server(int _fd_min, int _fd_max, int _fd_num)
+template <class IoType, class SwitchCalcGaps>
+Server<IoType, SwitchCalcGaps>::Server(int _fd_min, int _fd_max, int _fd_num)
     : ServerBase(m_ioHandler), m_ioHandler(_fd_min, _fd_max, _fd_num) {}
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
-Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::~Server() {}
+template <class IoType, class SwitchCalcGaps>
+Server<IoType, SwitchCalcGaps>::~Server() {}
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
-void Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::doLoop() {
+template <class IoType, class SwitchCalcGaps>
+void Server<IoType, SwitchCalcGaps>::doLoop() {
     int numReady = 0;
     int actual_fd = 0;
 
@@ -242,8 +241,8 @@ void Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::doLoop() {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
-int Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::server_accept(int ifd) {
+template <class IoType, class SwitchCalcGaps>
+int Server<IoType, SwitchCalcGaps>::server_accept(int ifd) {
     bool do_accept = false;
     int active_ifd = ifd;
 
@@ -348,25 +347,17 @@ int Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::server_accept(int ifd) {
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo, class SwitchCheckGaps>
+template <class IoType, class SwitchCheckGaps>
 void server_handler(int _fd_min, int _fd_max, int _fd_num) {
-    Server<IoType, SwitchActivityInfo, SwitchCheckGaps> s(_fd_min, _fd_max, _fd_num);
+    Server<IoType, SwitchCheckGaps> s(_fd_min, _fd_max, _fd_num);
     s.doHandler();
 }
 
 //------------------------------------------------------------------------------
-template <class IoType, class SwitchActivityInfo>
+template <class IoType>
 void server_handler(int _fd_min, int _fd_max, int _fd_num) {
     if (g_pApp->m_const_params.b_server_detect_gaps)
-        server_handler<IoType, SwitchActivityInfo, SwitchOnCalcGaps>(_fd_min, _fd_max, _fd_num);
-    else
-        server_handler<IoType, SwitchActivityInfo, SwitchOff>(_fd_min, _fd_max, _fd_num);
-}
-
-//------------------------------------------------------------------------------
-template <class IoType> void server_handler(int _fd_min, int _fd_max, int _fd_num) {
-    if (g_pApp->m_const_params.packetrate_stats_print_ratio > 0)
-        server_handler<IoType, SwitchOnActivityInfo>(_fd_min, _fd_max, _fd_num);
+        server_handler<IoType, SwitchOnCalcGaps>(_fd_min, _fd_max, _fd_num);
     else
         server_handler<IoType, SwitchOff>(_fd_min, _fd_max, _fd_num);
 }
diff --git a/src/server.h b/src/server.h
index 690a6c0..a78ab8b 100644
--- a/src/server.h
+++ b/src/server.h
@@ -32,6 +32,7 @@
 #include "defs.h"
 #include "common.h"
 #include "input_handlers.h"
+#include "switches.h"
 
 #ifdef ST_TEST
 extern int prepare_socket(int fd, struct fds_data *p_data, bool stTest = false);
@@ -78,7 +79,7 @@ protected:
 //==============================================================================
 //==============================================================================
 
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
+template <class IoType, class SwitchCalcGaps>
 class Server : public ServerBase {
 private:
     IoType m_ioHandler;
@@ -110,13 +111,13 @@ private:
     }
 
     class ServerMessageHandlerCallback {
-        Server<IoType, SwitchActivityInfo, SwitchCalcGaps> &m_server;
+        Server<IoType, SwitchCalcGaps> &m_server;
         int m_ifd;
         struct sockaddr_store_t &m_recvfrom_addr;
         socklen_t m_recvfrom_len;
         fds_data *m_fds_ifd;
     public:
-        inline ServerMessageHandlerCallback(Server<IoType, SwitchActivityInfo, SwitchCalcGaps> &server,
+        inline ServerMessageHandlerCallback(Server<IoType, SwitchCalcGaps> &server,
                 int ifd, struct sockaddr_store_t &recvfrom_addr, socklen_t recvfrom_len,
                 fds_data *l_fds_ifd) :
             m_server(server),
@@ -188,7 +189,7 @@ private:
     int server_accept(int ifd);
 
 private:
-    SwitchActivityInfo m_switchActivityInfo;
+    SwitchOnActivityInfo m_switchActivityInfo;
     SwitchCalcGaps m_switchCalcGaps;
 };
 
@@ -259,9 +260,9 @@ void close_ifd(int fd, int ifd, fds_data *l_fds_ifd) {
 /*
 ** receive from and send to selected socket
 */
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
+template <class IoType, class SwitchCalcGaps>
 template <class InputHandler>
-inline bool Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::server_receive_then_send_impl(int ifd) {
+inline bool Server<IoType, SwitchCalcGaps>::server_receive_then_send_impl(int ifd) {
     struct sockaddr_store_t recvfrom_addr;
     socklen_t recvfrom_len = sizeof(recvfrom_addr);
     static const bool do_update = true;
@@ -303,10 +304,13 @@ inline bool Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::server_receive_t
     }
 }
 
-template <class IoType, class SwitchActivityInfo, class SwitchCalcGaps>
-inline bool Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::handle_message(int ifd,
+template <class IoType, class SwitchCalcGaps>
+inline bool Server<IoType, SwitchCalcGaps>::handle_message(int ifd,
         struct sockaddr_store_t &recvfrom_addr, socklen_t recvfrom_len, fds_data *l_fds_ifd)
 {
+    static const bool is_exec_activity_info =
+        (g_pApp->m_const_params.packetrate_stats_print_ratio > 0);
+
     struct sockaddr_store_t sendto_addr;
     socklen_t sendto_addr_len = 0;
 
@@ -369,7 +373,9 @@ inline bool Server<IoType, SwitchActivityInfo, SwitchCalcGaps>::handle_message(i
     }
 
     m_switchCalcGaps.execute(recvfrom_addr, recvfrom_len, m_pMsgReply->getSequenceCounter(), false);
-    m_switchActivityInfo.execute(g_receiveCount);
+    if (unlikely(is_exec_activity_info)) {
+        m_switchActivityInfo.execute(g_receiveCount);
+    }
 
     return true;
 }
diff --git a/src/sockperf.cpp b/src/sockperf.cpp
index 3183719..0b0f18a 100644
--- a/src/sockperf.cpp
+++ b/src/sockperf.cpp
@@ -96,7 +96,6 @@
 #include "message_parser.h"
 #include "packet.h"
 #include "port_descriptor.h"
-#include "switches.h"
 #include "aopt.h"
 #include <stdio.h>
 #include <sys/stat.h>
@@ -2670,13 +2669,6 @@ inline bool CallbackMessageHandler<T>::handle_message()
         }*/
         msgReply->setHeaderToHost();
     }
-    /*
-     * TODO
-     * To support other server functionality when using zero callback,
-     * pass the server as user_context or as we pass the replyMsg, and call the server functions
-     */
-    // m_switchCalcGaps.execute(vma_info->src, msgReply->getSequenceCounter(), false);
-    // m_switchActivityInfo.execute(g_receiveCount);
 
     return true;
 }
-- 
2.43.0

